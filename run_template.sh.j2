#!/bin/bash
# --- Smart Python Project Runner ---
# This script was generated by create_wrapper.py
# It automatically uses the project's virtual environment to run the main script.

# Exit immediately if a command exits with a non-zero status.
set -e

# --- 1. Define Project Paths ---
# Find the absolute path of the directory where this script is located.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Define key paths relative to the script's location.
VENV_PYTHON="$SCRIPT_DIR/{{ venv_python_rel }}"
MAIN_SCRIPT="$SCRIPT_DIR/{{ main_script_rel }}"

# --- Sanity Checks ---
if [ ! -f "$VENV_PYTHON" ]; then
  echo "ERROR: Python interpreter not found at '$VENV_PYTHON'" >&2
  echo "The virtual environment might be missing or corrupted." >&2
  exit 1
fi

if [ ! -f "$MAIN_SCRIPT" ]; then
  echo "ERROR: Main script not found at '$MAIN_SCRIPT'" >&2
  exit 1
fi

{% if install_deps %}
# --- 2. Install Dependencies (if required) ---
REQUIREMENTS_FILE="$SCRIPT_DIR/{{ requirements_file }}"
# A flag file to track if dependencies are up-to-date based on timestamps.
DEPS_FLAG_FILE="$SCRIPT_DIR/{{ flag_file_rel }}"

# Check if requirements.txt exists
if [ -f "$REQUIREMENTS_FILE" ]; then
  # Check if the flag file exists and if requirements.txt is older than the flag.
  # If so, dependencies are considered up-to-date.
  if [ -f "$DEPS_FLAG_FILE" ] && [ "$REQUIREMENTS_FILE" -ot "$DEPS_FLAG_FILE" ]; then
    true
  else
    echo "INFO: {{ requirements_file }} has changed or this is the first run. Installing/updating dependencies..."
    "$VENV_PYTHON" -m pip install -r "$REQUIREMENTS_FILE"
    if [ $? -ne 0 ]; then
      echo "ERROR: Dependency installation failed. Aborting." >&2
      exit 1
    else
      # On successful installation, create or update the timestamp of the flag file.
      touch "$DEPS_FLAG_FILE"
    fi
  fi
else
  echo "INFO: No {{ requirements_file }} found, skipping dependency installation."
fi
{% endif %}

# --- 3. Execute the Python Script ---
# Pass all command-line arguments received by this wrapper to the Python script.
"$VENV_PYTHON" "$MAIN_SCRIPT" "$@"

# Exit with the status code of the Python script
exit $?
